generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  slug          String?   @unique
  role          UserRole  @default(GUEST)
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  orders        Order[]

  stripeCustomerId         String?
  stripeConnectedAccountId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([id])
  @@index([slug])
}

enum UserRole {
  GUEST
  MEMBER
  ARTIST
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Listing {
  id          String  @id @default(cuid())
  title       String
  description String
  price       Int
  image       String
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]

  audioFileId String?
  audioFile   AudioFile?

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, audioFileId])
}

model Order {
  id        String      @id @default(cuid())
  listingId String
  total     Float
  status    OrderStatus @default(DRAFT)
  userId    String
  listing   Listing     @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, userId])
}

enum OrderStatus {
  DRAFT
  PENDING
  PAID
  CANCELLED
  REFUNDED
  FAILED
}

model AudioFile {
  id String @id @default(cuid())

  accountId        String
  etag             String @unique
  fileUrl          String
  filePath         String
  originalFileName String
  size             Int
  mime             String

  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([etag, listingId])
  @@index([listingId])
}
